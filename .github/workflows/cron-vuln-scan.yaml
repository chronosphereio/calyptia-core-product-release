name: CVE scan of components to trigger alerting
on:
    workflow_dispatch:
    schedule:
        # Every day at 0430 UTC
        - cron: '30 4 * * *'
    pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    ci-get-metadata:
        uses: ./.github/workflows/get-versions.yaml

    ci-generate-alerts:
        name: Trigger alerts for failing CVEs
        runs-on: ubuntu-latest
        permissions:
            contents: read
        needs:
            - ci-get-metadata
        strategy:
            matrix:
                container:
                    - '${{ needs.ci-get-metadata.outputs.configmap-reload-image }}:${{ needs.ci-get-metadata.outputs.configmap-reload-version }}'
                    - '${{ needs.ci-get-metadata.outputs.core-fluent-bit-image }}:${{ needs.ci-get-metadata.outputs.core-fluent-bit-version }}'
                    - '${{ needs.ci-get-metadata.outputs.ingest-checks-image }}:${{ needs.ci-get-metadata.outputs.ingest-checks-version }}'
                    - '${{ needs.ci-get-metadata.outputs.core-operator-image }}:${{ needs.ci-get-metadata.outputs.core-operator-version }}'
                    - '${{ needs.ci-get-metadata.outputs.core-operator-sync-to-image }}:${{ needs.ci-get-metadata.outputs.core-operator-version }}'
                    - '${{ needs.ci-get-metadata.outputs.core-operator-sync-from-image }}:${{ needs.ci-get-metadata.outputs.core-operator-version }}'
                    - '${{ needs.ci-get-metadata.outputs.cloud-image }}:${{ needs.ci-get-metadata.outputs.cloud-version }}'
                    - '${{ needs.ci-get-metadata.outputs.frontend-image }}:${{ needs.ci-get-metadata.outputs.frontend-version }}'
                    - '${{ needs.ci-get-metadata.outputs.lua-sandbox-image }}:${{ needs.ci-get-metadata.outputs.lua-sandbox-version }}'
            fail-fast: false
        steps:
            - uses: actions/checkout@v4

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ghcr.io
                username: ${{ github.actor }}
                password: ${{ secrets.CI_PAT }}

            - name: Scan image, table output for debug
              uses: anchore/scan-action@v3
              with:
                image: ${{ matrix.container }}
                by-cve: true
                output-format: table
                fail-build: false

            - name: Scan image
              id: scan
              uses: anchore/scan-action@v3
              with:
                image: ${{ matrix.container }}
                fail-build: true
                severity-cutoff: high
                only-fixed: true
                by-cve: true
                output-format: json

            - name: Capture output to stdout for usage in notification
              if: failure()
              id: output
              #  Output is multi-line so beware of that
              run: |
                cat ${{ steps.scan.outputs.json }}
                echo "json=$(jq -cr . ${{ steps.scan.outputs.json }})"
                echo "json=$(jq -cr . ${{ steps.scan.outputs.json }})" >> $GITHUB_OUTPUT
              shell: bash

            - name: Send to Slack
              if: failure() && github.event_name != 'pull_request'
              uses: slackapi/slack-github-action@v1.26.0
              with:
                # pipeline-eng-notifications
                channel-id: ${{ secrets.CVE_SLACK_CHANNEL_ID }}
                payload: |
                    {
                        "text": "CVE detected in ${{ matrix.container }}: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        "blocks": [
                            {
                                "type": "section",
                                "text": {
                                  "type": "mrkdwn",
                                  "text": "json:"
                                }
                            },
                            {
                                "type": "context",
                                "text": {
                                    "type": "plain_text",
                                    "text": "${{ steps.output.outputs.json }}"
                                }
                            }
                        ]
                    }
              env:
                SLACK_BOT_TOKEN: ${{ secrets.CVE_SLACK_BOT_TOKEN }}
