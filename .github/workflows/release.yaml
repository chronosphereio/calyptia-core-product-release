name: Release
on:
    workflow_dispatch:
    push:
        tags:
            - 'v*'
jobs:
    ci-get-metadata:
        uses: ./.github/workflows/get-versions.yaml
        with:
            ref: ${{ github.ref }}

    ci-generate-reports:
      name: Generate SBOM and CVE reports for release
      uses: ./.github/workflows/call-generate-reports.yaml
      with:
          ref: ${{ github.ref }}
      secrets:
        registry-username: ${{ secrets.CI_USERNAME }}
        registry-password: ${{ secrets.CI_PAT }}
        github-token: ${{ secrets.CI_PAT }}

    ci-release:
        name: Create official release
        runs-on: ubuntu-latest
        needs:
            - ci-get-metadata
            - ci-generate-reports
        permissions:
            contents: write
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Download reports
          uses: actions/download-artifact@v4
          with:
            name: ${{ needs.ci-generate-reports.outputs.artefact-name }}
            path: reports/

        - name: Tar up reports
          run: tar -czvf sbom-cves.tar.gz -C reports/ .
          shell: bash

        - name: Create release for tag
          uses: softprops/action-gh-release@v2
          with:
            body: |
              Release of Calyptia Core ${{ github.ref_name }}:
                - CLI: ${{ needs.ci-get-metadata.outputs.cli-version }}
                - Cloud: ${{ needs.ci-get-metadata.outputs.cloud-version }}
                - Core Fluent Bit: ${{ needs.ci-get-metadata.outputs.core-fluent-bit-version }}
                - Core Operator: ${{ needs.ci-get-metadata.outputs.core-operator-version }}
                - Frontend: ${{ needs.ci-get-metadata.outputs.frontend-version }}
                - LUA Sandbox: ${{ needs.ci-get-metadata.outputs.lua-sandbox-version }}
            fail_on_unmatched_files: false
            # Using **/*.json gives duplicate uploads for component-config.json so fails on the second one as already exists
            files: |
                *.json
                sbom-cves.tar.gz
            generate_release_notes: false

    ci-trigger-notifications:
      name: Trigger updates on private repos
      runs-on: ubuntu-latest
      needs:
          - ci-get-metadata
          - ci-release
      permissions:
        contents: read
      strategy:
        matrix:
          repo: ['chronosphereio/calyptia-infra-gitops-configuration', 'chronosphereio/calyptia-chart-cloud-standalone', 'chronosphereio/calyptia-core-docs']
      steps:
        - uses: actions/checkout@v4

        - name: Get component config
          id: get-components
          run: |
            CONFIG=$(jq -cr . component-config.json)
            echo "config=$CONFIG"
            echo "config=$CONFIG" >> $GITHUB_OUTPUT
          shell: bash

        - name: Repository Dispatch
          uses: peter-evans/repository-dispatch@v3
          with:
            token: ${{ secrets.CI_PAT }}
            repository: ${{ matrix.repo }}
            event-type: core-product-release
            # The github.ref_name will give them the actual release tag to use but we also inject the component versions directly
            client-payload: |-
              {
                "github": ${{ toJson(github) }},
                "components": ${{ steps.get-components.outputs.config }}
              }

    # TODO: move to private repo using repository_dispatch
    ci-update-docs:
        name: Update Core Docs with new version
        runs-on: ubuntu-latest
        permissions:
            contents: none
        needs:
          - ci-generate-reports
          - ci-release
        steps:
        - name: Determine major version value from tag
          id: get-branch
          run: |
            if [[ "$TAG" =~ ^v?([0-9]+\.[0-9]+).*$ ]]; then
                echo "branch=${BASH_REMATCH[1]}"
                echo "branch=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            else
                echo "Invalid tag: $TAG"
                exit 1
            fi
          shell: bash
          env:
            TAG: ${{ github.ref_name }}

        - name: Checkout core docs repo
          uses: actions/checkout@v4
          with:
            repository: chronosphereio/calyptia-core-docs
            token: ${{ secrets.CI_PAT }}

        - name: Create or checkout branch
          run: |
            if git ls-remote --exit-code --heads origin refs/heads/"$BRANCH" &> /dev/null; then
              git checkout "$BRANCH"
            else
              git checkout -b "$BRANCH"
              git push --set-upstream origin "$BRANCH"
            fi
          shell: bash
          env:
            BRANCH: ${{ steps.get-branch.outputs.branch }}

        - name: Inject latest version
          run: echo "${{ github.ref_name }}" > ./latest-tag.txt

        - name: Download reports
          uses: actions/download-artifact@v4
          with:
            name: ${{ needs.ci-generate-reports.outputs.artefact-name }}
            path: /tmp/

        - name: Update any versions
          run: |
            cp -fv component-config.json "$REPORTS_DIR"/
            ls -lR "$REPORTS_DIR"/
            if [[ -x ./scripts/update-version.sh ]]; then
                echo "Updating versions to $NEW_VERSION"
                ./scripts/update-version.sh "$NEW_VERSION"
            else
                echo "Skipping as no executable ./scripts/update-version.sh found"
            fi
          shell: bash
          continue-on-error: true
          env:
            NEW_VERSION: ${{ github.ref_name }}
            REPORTS_DIR: /tmp/reports

        - name: Generate PR
          id: cpr
          uses: peter-evans/create-pull-request@v6
          with:
            commit-message: 'ci: update for release ${{ github.ref_name }}'
            signoff: true
            delete-branch: true
            title: 'ci: update for release ${{ github.ref_name }}'
            # We need workflows permission so have to use the CI_PAT
            token: ${{ secrets.CI_PAT }}
            # labels: ci,automerge,trigger-full-test
            body: |
                Update Calyptia product versions from Core Product Release ${{ github.ref_name }}

                - Created by ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                - Auto-generated by create-pull-request: https://github.com/peter-evans/create-pull-request
            draft: false

        - name: Check outputs
          if: ${{ steps.cpr.outputs.pull-request-number }}
          run: |
            echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
            echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
          shell: bash

        - name: Enable Pull Request Automerge
          continue-on-error: true
          if: ${{ steps.cpr.outputs.pull-request-number }}
          run: gh pr merge --squash --auto "${{ steps.cpr.outputs.pull-request-number }}"
          env:
            GH_TOKEN: ${{ secrets.CI_PAT }}