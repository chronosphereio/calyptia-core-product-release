name: Reusable workflow to create a new self-hosted stack
on:
    workflow_call:
        inputs:
            ref:
                description: The commit, tag or branch of this repository to check out.
                type: string
                required: false
                default: main
            zone:
                description: The GCP zone to use.
                type: string
                required: false
                default: us-east1-c
            project:
                description: The GCP project to use.
                type: string
                required: false
                default: calyptia-playground-371615
            firewall-rule:
                description: The name of the firewall rule for traffic and matching tag on the instance.
                type: string
                default: cloud-api-server
                required: false
            network:
                description: The GCP network to allow ingress for.
                type: string
                required: false
                default: default
            use-released-chart:
                description: Whether to use the local checked out chart or the one in the repository.
                type: boolean
                required: false
                default: true
            self-hosted-chart-ref:
                description: If not using the released chart then the ref to use for the development one.
                type: string
                required: false
                default: main
        secrets:
            token:
                description: The Github PAT used to checkout and also as a pull secret for registry access.
                required: true
            gcp-credentials:
                description: The GCP SA credentials to create the VM.
                required: true
        outputs:
            calyptia-cloud-url:
                description: The URL to connect to for Calyptia Cloud self-hosted stack.
                value: ${{ jobs.create-gcp-stack.outputs.cloud-url }}
            calyptia-cloud-token:
                description: The authentication token for Calyptia Cloud self-hosted stack.
                value: ${{ jobs.create-gcp-stack.outputs.cloud-token }}
            calyptia-cloud-vm-name:
                description: The name of the GCP VM created for cleanup later.
                value: ${{ jobs.create-gcp-stack.outputs.vm-name }}
jobs:
    create-gcp-stack:
        name: Spin up GCP VM with self-hosted stack
        runs-on: ubuntu-latest
        env:
            VM_NAME: ci-self-hosted-stack-${{ github.run_id }}
            VM_DESCRIPTION: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        outputs:
            cloud-token: ${{ steps.get-cloud-token.outputs.token }}
            cloud-url: ${{ steps.get-ip-address.outputs.url }}
            vm-name: ${{ env.VM_NAME }}
            KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        steps:
            - name: Checkout self-hosted chart repo
              uses: actions/checkout@v4
              with:
                repository: calyptia/core-product-release
                ref: ${{ inputs.ref }}
                token: ${{ secrets.token }}

            - id: 'auth'
              uses: 'google-github-actions/auth@v2'
              with:
                credentials_json: ${{ secrets.gcp-credentials }}

            - name: 'Set up Cloud SDK'
              uses: 'google-github-actions/setup-gcloud@v2'

            - name: Set up defaults
              run: |
                gcloud config set compute/zone '${{ inputs.zone }}'
                gcloud config set project '${{ inputs.project }}'
                gcloud info
              shell: bash

            - name: Create GCP VM
              timeout-minutes: 5
              run: ./scripts/create-self-hosted-gcp-vm.sh
              shell: bash

            - name: Set up ingress rule for traffic if not present
              run: |
                gcloud compute instances add-tags "$VM_NAME" --tags='${{ inputs.firewall-rule }}'
                if gcloud compute firewall-rules describe '${{ inputs.firewall-rule }}' ; then
                  echo "Firewall rule already in place"
                  gcloud compute firewall-rules update '${{ inputs.firewall-rule }}' --allow tcp:5000 \
                    --source-tags='${{ inputs.firewall-rule }}' --source-ranges=0.0.0.0/0
                else
                  gcloud compute firewall-rules create '${{ inputs.firewall-rule }}' --allow tcp:5000 \
                    --source-tags='${{ inputs.firewall-rule }}' --source-ranges=0.0.0.0/0 \
                    --description="Cloud API traffic" --network="${{ inputs.network }}" --direction=INGRESS
                fi
              shell: bash

            - name: Install k3s
              timeout-minutes: 10
              run: |
                gcloud compute ssh "$VM_NAME" -q --command="curl -sSfL https://get.k3s.io/ | sh -s - --write-kubeconfig-mode 644 --prefer-bundled-bin"
                gcloud compute ssh "$VM_NAME" -q --command="until k3s kubectl get pods -A; do sleep 10; done"
              shell: bash

            - name: Install helm
              timeout-minutes: 5
              run: |
                gcloud compute ssh "$VM_NAME" -q --command="curl -sSfL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
              shell: bash

            - name: Install self-hosted from release repo
              if: inputs.use-released-chart
              timeout-minutes: 6
              run: |
                gcloud compute ssh "$VM_NAME" -q --command="helm repo add calyptia https://helm.calyptia.com --force-update"
                gcloud compute ssh "$VM_NAME" -q --command="helm repo update"
                gcloud compute ssh "$VM_NAME" -q --command="export KUBECONFIG=/etc/rancher/k3s/k3s.yaml;helm upgrade --install \
                    --create-namespace --namespace calyptia \
                    --set imageCredentials.secretName=regcreds \
                    --set imageCredentials.registry=ghcr.io \
                    --set imageCredentials.username='${{ github.actor }}' \
                    --set imageCredentials.password='${{ secrets.token }}' \
                    --set imageCredentials.email='ci@calyptia.com' \
                    --set global.pullPolicy=IfNotPresent \
                    --set vivo.enabled=false \
                    --set frontend.enabled=false \
                    --set operator.enabled=false \
                    --wait --debug \
                    calyptia-cloud calyptia/calyptia-standalone"
              shell: bash

            - name: Checkout self-hosted chart repo
              if: ${{ ! inputs.use-released-chart }}
              uses: actions/checkout@v4
              with:
                repository: calyptia/chart-cloud-standalone
                ref: ${{ inputs.self-hosted-chart-ref }}
                token: ${{ secrets.token }}
                path: local-self-hosted/

            - name: Install self-hosted from local repo
              if: ${{ ! inputs.use-released-chart }}
              timeout-minutes: 6
              run: |
                gcloud compute ssh "$VM_NAME" -q --command="export KUBECONFIG=/etc/rancher/k3s/k3s.yaml;helm upgrade --install \
                    --create-namespace --namespace calyptia \
                    --set imageCredentials.secretName=regcreds \
                    --set imageCredentials.registry=ghcr.io \
                    --set imageCredentials.username='${{ github.actor }}' \
                    --set imageCredentials.password='${{ secrets.token }}' \
                    --set imageCredentials.email='ci@calyptia.com' \
                    --set global.pullPolicy=IfNotPresent \
                    --set vivo.enabled=false \
                    --set frontend.enabled=false \
                    --set operator.enabled=false \
                    --wait --debug \
                    ./chart calyptia/calyptia-standalone"
              shell: bash

            - name: Get cloud token
              id: get-cloud-token
              run: |
                TOKEN=$(gcloud compute ssh "$VM_NAME" -q --command="k3s kubectl get secret -n calyptia auth-secret -o jsonpath='{.data.token}'| base64 --decode")
                echo "token=$TOKEN"
                echo "token=$TOKEN" >> $GITHUB_OUTPUT
              shell: bash

            - name: Get IP address
              id: get-ip-address
              run: |
                INTERNAL_IP=$(gcloud compute instances describe "$VM_NAME" --format='get(networkInterfaces[0].networkIP)')
                echo "internal=$INTERNAL_IP"
                echo "internal=$INTERNAL_IP" >> $GITHUB_OUTPUT

                EXTERNAL_IP=$(gcloud compute instances describe "$VM_NAME" --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
                echo "external=$EXTERNAL_IP"
                echo "external=$EXTERNAL_IP" >> $GITHUB_OUTPUT

                EXTERNAL_URL="http://${EXTERNAL_IP}:5000"
                echo "url=$EXTERNAL_URL"
                echo "url=$EXTERNAL_URL" >> $GITHUB_OUTPUT
              shell: bash

            - name: Debug
              if: always()
              continue-on-error: true
              run: |
                gcloud compute ssh "$VM_NAME" -q --command='journalctl -u k3s' || true
                gcloud compute ssh "$VM_NAME" -q --command='k3s kubectl get pods --all-namespaces' || true
                gcloud compute firewall-rules list || true
                curl -sSfL "${{ steps.get-ip-address.outputs.url }}" || true
              shell: bash
